Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># This is a sample Python script.\r\nimport xml.etree.ElementTree as ET\r\nimport sys\r\n# Press Shift+F10 to execute it or replace it with your code.\r\n# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.\r\nAND_OP = \"&\"\r\nOR_OP = \"|\"\r\n\r\n\r\n# a -> 0 ; A -> 1 | a = not A\r\n\r\n\r\ndef translate_expression(expression, variables):\r\n    expression = expression.replace(\"amp;\", '')\r\n    aux = ''\r\n    var_dict = {}\r\n    for i in variables:\r\n        a = i.split('=')\r\n        var_dict[a[0]] = a[1]\r\n    for i in expression:\r\n        if i.lower() in var_dict.keys():\r\n            if i.islower():\r\n                aux += var_dict[i.lower()] + '=\\'0\\''\r\n            else:\r\n                aux += var_dict[i.lower()] + '=\\'1\\''\r\n\r\n        elif i == '|':\r\n            aux += ' or '\r\n            \r\n        elif i == '&':\r\n            \r\n            aux += ' and '\r\n        else:\r\n            aux += i\r\n\r\n    return aux\r\n\r\n\r\ndef generate(file2open, name_of_fsm):\r\n    # Use a breakpoint in the code line below to debug your script.\r\n    entity = '''library IEEE;\\nuse IEEE.STD_LOGIC_1164.ALL;\\n\\n'''\r\n    entity += '''entity FSM is\r\n        Port ( clk : in STD_LOGIC;\r\n               rst : in STD_LOGIC;'''\r\n    entity += '\\n'\r\n\r\n    entity_end = \"end FSM;\\n\"\r\n\r\n    behave_begin = \"\\narchitecture Behavioral of FSM is\\n\"\r\n\r\n    statereg_begin = '''stateReg:process(clk,rst)\r\nbegin\r\n    if rst = '1' then\r\n        acts <= '''\r\n\r\n    statereg_end = '''elsif rising_edge(clk) then\r\n        acts <= nxts;    \r\n    end if;\r\nend process;'''\r\n\r\n    states = {}\r\n    states_transitions = {}\r\n    transitions = {}\r\n    inout = {}\r\n\r\n    name = name_of_fsm\r\n    entity = entity.replace(\"FSM\", name)\r\n\r\n    entity_end = entity_end.replace(\"FSM\", name)\r\n    behave_begin = behave_begin.replace(\"FSM\", name)\r\n\r\n    tree = ET.parse(file2open)\r\n    # root = ET.fromstring(country_data_as_string)  --Direto da string\r\n    root = tree.getroot()\r\n\r\n    list_of_outputs = []\r\n    list_of_inputs = []\r\n    for child in root[0]:\r\n        dict_child = child.attrib\r\n        if len(dict_child['id']) > 5:\r\n            if 'whiteSpace=wrap' in dict_child['style']:\r\n\r\n                try:\r\n                    states[dict_child['id']] = dict_child['value']\r\n                except:\r\n                    states[dict_child['id']] = \"000000\"\r\n                states_transitions[dict_child['id']] = []\r\n\r\n            elif 'endArrow' in dict_child['style'] or 'orthogonalEdgeStyle' in dict_child['style']:  # Ã© bom melhorar esses try except\r\n                boolexp = '00000'\r\n                outexp = '00000'\r\n\r\n                try:\r\n                    if '/' in dict_child['value']:\r\n                        boolexp, outexp = dict_child['value'].split('/')\r\n\r\n                    else:\r\n                        boolexp = dict_child['value']\r\n                        outexp = '00000'\r\n\r\n                except:\r\n\r\n                    pass\r\n\r\n                try:\r\n                    transitions[dict_child['id']] = (dict_child['source'], dict_child['target'], boolexp, outexp)\r\n                except:\r\n\r\n                    transitions[dict_child['id']] = (dict_child['source'], dict_child['target'], '000000','000000')\r\n\r\n            elif 'swimlane' in dict_child['style']:\r\n\r\n                inout[dict_child['id']] = (dict_child['value'], [])\r\n\r\n            elif 'text' in dict_child['style']:\r\n                inout[dict_child['parent']][1].append(dict_child['value'])\r\n                if inout[dict_child['parent']][0] != 'Variables':\r\n                    list_of_outputs.append(dict_child['value'].split('=')[0])\r\n                if inout[dict_child['parent']][0] == 'Variables':\r\n                    list_of_inputs.append(dict_child['value'].split('=')[1])\r\n                    var_location = dict_child['parent']\r\n    mealy_out = {}\r\n    for i in list(inout.keys()):\r\n        if inout[i][0] == 'Variables_mealy':\r\n            for j in inout[i][1]:\r\n                aux = j.split('=')\r\n                mealy_out[aux[0]] = aux[1]+'<'\r\n\r\n    for i in range(len(list_of_outputs)):\r\n        if list_of_outputs[i] in list(mealy_out.keys()):\r\n            list_of_outputs[i] = mealy_out[list_of_outputs[i]]\r\n\r\n    list_of_outputs = list(set(list_of_outputs))\r\n    list_of_inputs = list(set(list_of_inputs))\r\n    list_of_outputs.sort()\r\n    list_of_inputs.sort()\r\n\r\n    for key in transitions.keys():\r\n        states_transitions[transitions[key][0]].append(key)\r\n\r\n    # my_inverted_dict = dict(map(reversed, my_dict.items()))\r\n\r\n    for key in inout.keys():\r\n        if 'Variables' == inout[key][0]:\r\n            for i in inout[key][1]:\r\n                entity += '               ' + i.split('=')[1]+': in STD_LOGIC;\\n'\r\n    for i in list_of_outputs:\r\n        entity += '               ' + i[:-1] + ': out STD_LOGIC;\\n'\r\n    entity = entity[:-2]\r\n    entity += ');\\n' + entity_end+behave_begin+'\\n'\r\n    entity += 'type states is ('\r\n\r\n    for key in states.keys():\r\n        entity += states[key]+','\r\n    entity = entity[:-1]+');\\n'\r\n    entity.replace('<', '')\r\n    entity += 'signal acts,nxts:states:='+states[list(states.keys())[0]] + ';\\n'\r\n\r\n    entity += '\\nbegin\\n'\r\n    entity += statereg_begin+states[list(states.keys())[0]] + ';\\n    '\r\n    entity += statereg_end+'\\n'\r\n\r\n    process_head = \"\\ncombLogic:process(acts,\"\r\n    for i in list_of_inputs:\r\n        process_head += i+','\r\n    process_head = process_head[:-1] + \")\\nbegin\\n\"\r\n    entity += process_head\r\n\r\n    entity += \"\\ncase acts is\\n\"\r\n\r\n    for key in states.keys():\r\n        entity += \"   when \" + states[key] + \"=>\\n\"\r\n        if len(states_transitions[key]) == 1:\r\n            entity += \"       nxts<=\" + states[transitions[states_transitions[key][0]][1]] + \";\\n\"\r\n        else:\r\n            cnt = 0\r\n            size = len(list(states_transitions[key]))\r\n\r\n            for transition in states_transitions[key]:\r\n\r\n                if transitions[transition][2] == 'else':\r\n                    aux = transitions[transition][1]\r\n                    \r\n                else:\r\n                    if cnt == 0:\r\n                        entity += '       if ' + translate_expression(transitions[transition][2], inout[var_location][1]) + ' then \\n'\r\n                        entity += '          nxts<= ' + states[transitions[transition][1]] + ';\\n'\r\n                        cnt += 1\r\n                        \r\n                    elif size-1 > cnt > 0:\r\n                        entity += '       elsif ' + translate_expression(transitions[transition][2], inout[var_location][1]) + ' then\\n'\r\n                        entity += '          nxts<= ' + states[transitions[transition][1]] + ';\\n'\r\n                        cnt += 1\r\n\r\n            entity += '       else\\n          nxts<='+states[aux]+';\\n'\r\n            entity += '       end if;\\n'\r\n\r\n    entity += \"   when others=>\\n\"\r\n    entity += '       nxts<= '+states[list(states.keys())[0]]+';\\n'\r\n    entity += 'end case;\\n'\r\n    entity += 'end process;\\n'\r\n\r\n    mealy_state_outputs = {}  # stores expression and outputs related to a state\r\n    for i in transitions:\r\n        if transitions[i][0] not in mealy_state_outputs:\r\n            mealy_state_outputs[transitions[i][0]] = []\r\n        mealy_state_outputs[transitions[i][0]].append ((transitions[i][2], transitions[i][3]))\r\n\r\n\r\n    process_head = \"\\noutputLogic:process(acts,\"\r\n    for i in list_of_inputs:\r\n        process_head += i + ','\r\n    process_head = process_head[:-1] + \")\\nbegin\\n\"\r\n    entity += process_head\r\n    entity += \"\\ncase acts is\\n\"\r\n\r\n    for key in states.keys():\r\n\r\n        entity += \"   when \" + states[key] + \"=>\\n\"\r\n        for i in inout.keys():\r\n            if inout[i][0] == states[key]:\r\n                for output in inout[i][1]:\r\n                    entity += '       ' + output+';\\n'\r\n\r\n        is_moore=0\r\n        for i in mealy_state_outputs:\r\n            for j in  mealy_state_outputs[i]:\r\n                if j[1]=='00000':\r\n                    is_moore=1\r\n\r\n        size = len(list(states_transitions[key]))\r\n        if size == 1 and not is_moore:\r\n            aux = []\r\n            for i in mealy_state_outputs[key]:\r\n                aux = i[1].split(',')\r\n                for j in aux:\r\n                    if j.isupper():\r\n                        entity += \"       \"+mealy_out[j.lower()][:-1]+\"<='1';\\n\"\r\n                    else:\r\n                        entity += \"       \"+mealy_out[j.lower()][:-1]+\"<='0';\\n\"\r\n\r\n        elif size > 1 and not is_moore:\r\n            cnt = 0\r\n            size = len(list(states_transitions[key]))\r\n            for transition in mealy_state_outputs[key]:\r\n                if transition[0] == 'else':\r\n                    aux2 = transition[1]\r\n                else:\r\n                    if cnt == 0:\r\n                        entity += '\\n       if ' + translate_expression(transition[0],\r\n                                                                      inout[var_location][1]) + ' then \\n'\r\n                        aux = transition[1].split(',')\r\n                        for j in aux:\r\n                            if j.isupper():\r\n                                entity += \"             \" + mealy_out[j.lower()][:-1] + \"<='1';\\n\"\r\n                            else:\r\n                                entity += \"             \" + mealy_out[j.lower()][:-1] + \"<='0';\\n\"\r\n                        cnt += 1\r\n\r\n                    elif cnt < size - 1 and cnt > 0:\r\n                        entity += '       elsif ' + translate_expression(transition[0],\r\n                                                                         inout[var_location][1]) + ' then\\n'\r\n                        aux = transition[1].split(',')\r\n                        for j in aux:\r\n                            if j.isupper():\r\n                                entity += \"             \" + mealy_out[j.lower()][:-1] + \"<='1';\\n\"\r\n                            else:\r\n                                entity += \"             \" + mealy_out[j.lower()][:-1] + \"<='0';\\n\"\r\n                        cnt += 1\r\n            entity += '       else\\n'\r\n\r\n            aux = aux2.split(',')\r\n            for j in aux:\r\n                if j.isupper():\r\n                    entity += \"             \" + mealy_out[j.lower()][:-1] + \"<='1';\\n\"\r\n                else:\r\n                    entity += \"             \" + mealy_out[j.lower()][:-1] + \"<='0';\\n\"\r\n            entity += '       end if;\\n'\r\n    entity += \"   when others=>\\n\"\r\n    for i in list_of_outputs:\r\n        entity += \"       \"+i[:-1]+\"<='0';\\n\"\r\n\r\n    entity += 'end case;\\n'\r\n    entity += 'end process;\\n'\r\n    entity += 'end Behavioral;'\r\n    print(entity)\r\n    file = open(name+'.vhd', 'w')\r\n    print(transitions,'\\n',states)\r\n    file.write(entity)\r\n    file.close()\r\n\r\n\r\n# generate(str(sys.argv[1]), str(sys.argv[2]))\r\n# print(\"File ready! Please check the reset state as it is \\\"randomly\\\" chosen.\")\r\n# Press the green button in the gutter to run the script.\r\n#if __name__ == '__main__':\r\n#    generate('teste.xml', 'fsm')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 1d4d5640c0819bace3ba550d8d97044a10eea081)
+++ b/main.py	(date 1668421697493)
@@ -283,14 +283,14 @@
     entity += 'end case;\n'
     entity += 'end process;\n'
     entity += 'end Behavioral;'
-    print(entity)
+
     file = open(name+'.vhd', 'w')
-    print(transitions,'\n',states)
+ 
     file.write(entity)
     file.close()
 
 
-# generate(str(sys.argv[1]), str(sys.argv[2]))
+generate(str(sys.argv[1]), str(sys.argv[2]))
 # print("File ready! Please check the reset state as it is \"randomly\" chosen.")
 # Press the green button in the gutter to run the script.
 #if __name__ == '__main__':
